@model WebUXv2.Models.TaskType

<h2>Edit My Task</h2>

@using (Html.BeginForm())
{
   @*@Html.AntiForgeryToken()*@
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RootComponentName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RootComponentName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RootComponentName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SearchTags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SearchTags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SearchTags, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            if (Model.TaskInputs != null && Model.TaskInputs.Any())
            {
                <h4>Input Parameters</h4>

                <table class="table">
                    @{
                        var taskInputs = Model.TaskInputs.ToArray();
                        var i = 0;
                    }
                    @{
                        foreach (var input in Model.TaskInputs)
                        {
                            <tr>
                                <td class="col-md-2">
                                    <div>
                                        @Html.DisplayFor(model => taskInputs[i].Name)
                                        @Html.HiddenFor(model => taskInputs[i].Name, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.HiddenFor(model => taskInputs[i].Id, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.HiddenFor(model => taskInputs[i].TaskTypeId, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </td>

                                <td>
                                    <div>
                                        @Html.EditorFor(model => taskInputs[i].Value, new { htmlAttributes = new { @class = "form-control"} })
                                        @Html.ValidationMessageFor(model => taskInputs[i].Value, "", new { @class = "text-danger" })
                                        N.B. No type validation here yet!
                                    </div>
                                </td>
                            </tr>
                            i++;
                        }
                    }
                </table>
            }

        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
