@model WebUXv2.Models.SecondLineDefenceQuestion

@{
    var uxTaskId = ViewBag.uxTaskId;
    bool showBackButton = ViewBag.ShowBackButton;
    string backButtonText = ViewBag.BackButtonText;
}

@Html.ActionLink("Find a different customer", "ResetCustomerContextInput", new { uxTaskId = uxTaskId })
<br/>
@using (Html.BeginForm()) 
{
   @*@Html.AntiForgeryToken()*@
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.DateAsked, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateAsked, new { htmlAttributes = new { @class = "form-control", type="date" } })
                @Html.ValidationMessageFor(model => model.DateAsked, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BenefitOption, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BenefitOption, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BenefitOption, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContactMethod, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactMethod, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactMethod, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PensionsGuidance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.PensionsGuidance)
                    @Html.ValidationMessageFor(model => model.PensionsGuidance, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RegulatedAdvice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.RegulatedAdvice)
                    @Html.ValidationMessageFor(model => model.RegulatedAdvice, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RiskWarning, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.RiskWarning)
                    @Html.ValidationMessageFor(model => model.RiskWarning, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.ScriptName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ScriptName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ScriptName, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.CustomerId)

        @if (showBackButton)
                {
            @Html.ActionLink(backButtonText, "Back", "TaskManager", new { uxTaskId = uxTaskId }, new { @class = "btn btn-danger" })
            <span>&nbsp; &nbsp;</span>
        }
        <input type="submit" value="Add" class="btn btn-success" />

    </div>
}

