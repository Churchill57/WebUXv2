@model WebUXv2.Models.TaskType
@{
    var uxTaskId = ViewBag.uxTaskId;
    bool showBackButton = ViewBag.ShowBackButton;
    string backButtonText = ViewBag.BackButtonText;
    string doneButtonText = ViewBag.DoneButtonText;
}

<br/>

@using (Html.BeginForm())
{
   @*@Html.AntiForgeryToken()*@

    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.Name, "")
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RootComponentName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.RootComponentName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.RootComponentName)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SearchTags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.SearchTags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.SearchTags)
            </div>
        </div>
        
        @Html.HiddenFor(model => model.Id)

        @Html.HiddenFor(model => model.Host)

        
        @{
            if (Model.TaskInputs != null && Model.TaskInputs.Any())
            {
                <h4>Input Parameters</h4>

                <table class="table">
                    @{
                        var taskInputs = Model.TaskInputs.ToArray();
                        var i = 0;
                    }
                    @{
                        foreach (var input in Model.TaskInputs)
                        {
                            <tr>
                                <td class="col-md-2">
                                    <div>
                                        @Html.HiddenFor(model => taskInputs[i].Id)
                                        @Html.HiddenFor(model => taskInputs[i].TaskTypeId)

                                        @Html.DisplayFor(model => taskInputs[i].Name)
                                        @Html.HiddenFor(model => taskInputs[i].Name)
                                    </div>
                                </td>

                                <td>
                                    <div>
                                        @Html.DisplayFor(model => taskInputs[i].Value)
                                        @Html.HiddenFor(model => taskInputs[i].Value)
                                    </div>
                                </td>
                            </tr>
                            i++;
                        }
                    }
                </table>
            }

        }

    </div>

    <div class="form-group">
        <div class="col-md-8">
            @if (showBackButton)
            {
                @Html.ActionLink(backButtonText, "Back", "TaskManager", new { uxTaskId = uxTaskId }, new { @class = "btn btn-danger" })
                <span>&nbsp; &nbsp;</span>
            }
            <input type="submit" value="@doneButtonText" class="btn btn-success" />
            &nbsp;&nbsp;
        </div>
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
